/**
 * @mainpage AMU Library Documentation
 * 
 * @section intro_sec Introduction
 * 
 * The AMU (Aerospace Measurement Unit) Library provides a comprehensive C/C++ interface
 * for communicating with AMU hardware devices over I2C and USB interfaces. This library
 * is Arduino-compatible and includes extensive SCPI (Standard Commands for Programmable
 * Instruments) command support for precise measurement and control operations.
 * 
 * @section features_sec Key Features
 * 
 * - **Dual Interface Support**: Both I2C and USB communication
 * - **SCPI Compliance**: Standard instrument control protocol
 * - **Arduino Compatible**: Easy integration with Arduino projects
 * - **Comprehensive Measurements**: Voltage, current, temperature, sun sensor data
 * - **I-V Sweep Capability**: Solar cell characterization functions
 * - **Calibration Support**: Built-in calibration routines with EEPROM storage
 * - **Auxiliary Functions**: DAC output, heater control, LED patterns
 * 
 * @section getting_started_sec Getting Started
 * 
 * @subsection installation_subsec Installation
 * 
 * 1. Download the library from the repository
 * 2. For Arduino IDE: Install as ZIP library
 * 3. For PlatformIO: Add to lib_deps in platformio.ini
 * 
 * @subsection basic_usage_subsec Basic Usage
 * 
 * @code
 * #include <Wire.h>
 * #include <amulib.h>
 * 
 * AMU amu;
 * 
 * void setup() {
 *     Serial.begin(115200);
 *     Wire.begin();
 *     Wire.setClock(400000);
 *     
 *     // Initialize AMU device at I2C address 0x0B
 *     amu.begin(0x0B);
 *     
 *     // Wait for device to be ready
 *     if (amu.waitUntilReady(5000) == 0) {
 *         Serial.println("AMU device ready!");
 *     }
 * }
 * 
 * void loop() {
 *     // Read measurements
 *     float voltage = amu.measureVoltage();
 *     float current = amu.measureCurrent();
 *     float temp = amu.measureTSensor();
 *     
 *     Serial.printf("V: %.3f V, I: %.6f A, T: %.1f C\n", 
 *                   voltage, current, temp);
 *     
 *     delay(1000);
 * }
 * @endcode
 * 
 * @section documentation_sec Documentation Sections
 * 
 * - @ref scpi_commands "SCPI Command Reference" - Complete command documentation
 * - @ref api_reference "C++ API Reference" - Library function documentation
 * - @ref examples "Examples" - Code examples and tutorials
 * - @ref hardware "Hardware Reference" - AMU hardware specifications
 * 
 * @section command_overview_sec SCPI Command Overview
 * 
 * The AMU supports over 100 SCPI commands organized into functional groups:
 * 
 * @subsection system_commands_overview System Commands
 * - Device identification and status
 * - LED control and patterns
 * - Sleep mode and power management
 * - I2C configuration
 * - Firmware information
 * 
 * @subsection measurement_commands_overview Measurement Commands
 * - Voltage and current measurements
 * - Multi-channel temperature sensing
 * - Sun sensor angle calculations
 * - Internal voltage monitoring
 * - Pressure sensor data
 * 
 * @subsection calibration_commands_overview Calibration Commands
 * - ADC calibration procedures
 * - DAC calibration
 * - Temperature sensor calibration
 * - EEPROM storage of calibration data
 * 
 * @subsection sweep_commands_overview I-V Sweep Commands
 * - Solar cell characterization
 * - Configurable sweep parameters
 * - Data storage and retrieval
 * - Voc and Isc measurements
 * 
 * @section compatibility_sec Compatibility
 * 
 * - **Arduino**: Uno, Nano, ESP32, ESP8266, and compatible boards
 * - **PlatformIO**: All supported platforms
 * - **Interfaces**: I2C (400kHz), USB Serial
 * - **Voltage**: 3.3V and 5V logic compatible
 * 
 * @section license_sec License
 * 
 * This library is released under the MIT License. See LICENSE file for details.
 * 
 * @section author_sec Author
 * 
 * Colin Mann - The Aerospace Corporation
 * 
 * @version 2.1
 * @date 2025
 */

/**
 * @page api_reference C++ API Reference
 * @brief Complete C++ library API documentation
 * 
 * This section documents all public classes, functions, and types provided
 * by the AMU library for C++ applications.
 * 
 * @section main_classes Main Classes
 * 
 * - AMU - Primary interface class for AMU device communication
 * 
 * @section data_types Data Types
 * 
 * The library defines several data types for structured data exchange:
 * - Temperature sensor data
 * - Sun sensor measurements  
 * - I-V sweep configurations
 * - Calibration coefficients
 * 
 * @section error_handling Error Handling
 * 
 * All functions return appropriate error codes or use exceptions where
 * applicable. Check return values and handle errors appropriately.
 */

/**
 * @page examples Code Examples
 * @brief Example code and tutorials
 * 
 * This section provides complete working examples for common AMU library tasks.
 * 
 * @section basic_examples Basic Examples
 * 
 * - Simple measurement reading
 * - LED control
 * - Multi-device I2C communication
 * 
 * @section advanced_examples Advanced Examples
 * 
 * - I-V sweep measurements
 * - Temperature-controlled testing
 * - Data logging and storage
 * - Custom calibration procedures
 */

/**
 * @page hardware Hardware Reference
 * @brief AMU hardware specifications and interface details
 * 
 * @section electrical_specs Electrical Specifications
 * 
 * - **Supply Voltage**: 3.3V - 5V
 * - **Current Consumption**: < 100mA typical
 * - **Measurement Resolution**: 24-bit ADC
 * - **Temperature Range**: -40°C to +85°C
 * 
 * @section interfaces Interface Specifications
 * 
 * @subsection i2c_interface I2C Interface
 * - **Clock Speed**: Up to 400kHz
 * - **Address Range**: 0x08 - 0x77 (configurable)
 * - **Pull-up Resistors**: 4.7kΩ recommended
 * 
 * @subsection usb_interface USB Interface  
 * - **Protocol**: USB CDC (Virtual COM Port)
 * - **Baud Rate**: 115200 (virtual, actual speed limited by USB)
 * - **Flow Control**: None required
 */