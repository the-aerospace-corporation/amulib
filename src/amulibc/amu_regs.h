/**
 * @file amu_regs.h
 * @brief TODO
 * 
 * @author	CJM28241
 * @date	5/5/2019 4:08:12 PM
 */


#ifndef __AMU_REGS_H__
#define __AMU_REGS_H__

#include "amu_types.h"

	/**
	 * @brief TODO
	 * 
	 * TODO
	 */
	typedef enum {
		AMU_REG_CMD = 0x00,							/*!< 1 byte register, new commands are placed here */
		AMU_REG_SYSTEM = 0x00,						/*!< 16 byte register */
		AMU_REG_DUT = 0x0C,							
		AMU_REG_ADC_DATA = 0x60,					/*!< 64 byte register containing all 16 HRADC channels or data in raw format */
		AMU_REG_SUNSENSOR = 0x90,					/*!< 24 byte register (struct). First four bytes overlap with last four adc conversions for TL,BL,BR,TR photo-diodes */
		AMU_REG_SUNSENSOR_ANGLE = 0xA0,				/*!< 8 byte register with two floats, yaw and pitch */
		AMU_REG_TIME = 0xA8,						
		AMU_REG_SWEEP_CONFIG = 0xB0,				
		AMU_REG_SWEEP_META = 0xC0,					
		AMU_REG_DATA_PTR = 0xF0,					
		AMU_REG_TRANSFER_PTR = 0xFE,				
	} AMU_REG_t;

	#define AMU_REG_SYSTEM_OFFSET	AMU_REG_SYSTEM
	typedef enum {
		AMU_REG_SYSTEM_CMD = AMU_REG_SYSTEM_OFFSET + 0x00,						//no command
		AMU_REG_SYSTEM_AMU_STATUS = AMU_REG_SYSTEM_OFFSET + 0x01,				/*!< uint8_t amu status byte enum */
		AMU_REG_SYSTEM_TWI_STATUS = AMU_REG_SYSTEM_OFFSET + 0x02,				/*!< uint8_t twi status byte enum */
		AMU_REG_SYSTEM_HARDWARE_REVISION = AMU_REG_SYSTEM_OFFSET + 0x03,		/*!< uint8_t hardware revision enum */
		AMU_REG_SYSTEM_TSENSOR_TYPE = AMU_REG_SYSTEM_OFFSET + 0x04,			/*!< uint8_t type of temperature sensor (PT100, PT1000, NPT, AD590, etc.. */
		AMU_REG_SYSTEM_TSENSOR_NUM = AMU_REG_SYSTEM_OFFSET + 0x05,				/*!< uint8_t number of temperature sensors (1-3) */
		AMU_REG_SYSTEM_ADC_ACTIVE_CHANNELS = AMU_REG_SYSTEM_OFFSET + 0x06,		/*!< uin16_t enabled ADC channels */
		AMU_REG_SYSTEM_STATUS_HRADC = AMU_REG_SYSTEM_OFFSET + 0x08,			/*!< uint32_t packed with HRADC ID and 3 error bytes from AD7124 */
	} AMU_REG_SYSTEM_t;
	#undef AMU_REG_SYSTEM_OFFSET

	#define AMU_REG_DUT_OFFSET		AMU_REG_DUT
	typedef enum {
		AMU_REG_DUT_JUNCTION = AMU_REG_DUT_OFFSET + 0x00,			
		AMU_REG_DUT_COVERGLASS = AMU_REG_DUT_OFFSET + 0x01,		
		AMU_REG_DUT_INTERCONNECT = AMU_REG_DUT_OFFSET + 0x02,		
		AMU_REG_DUT_RESERVED = AMU_REG_DUT_OFFSET + 0x03,			
		AMU_REG_DUT_MANUFACTURER = AMU_REG_DUT_OFFSET + 0x04,		/*!< 16 byte array, null terminated c-string */
		AMU_REG_DUT_MODEL = AMU_REG_DUT_OFFSET + 0x14,				/*!< 16 byte array, null terminated c-string */
		AMU_REG_DUT_TECHNOLOGY = AMU_REG_DUT_OFFSET + 0x24,		/*!< 16 byte array, null terminated c-string */
		AMU_REG_DUT_SERIAL_NUMBER = AMU_REG_DUT_OFFSET + 0x34,		/*!< 24 byte array, null terminated c-string */
		AMU_REG_DUT_ENERGY = AMU_REG_DUT_OFFSET + 0x4C,			/*!< float energy of irradaited particle */
		AMU_REG_DUT_DOSE = AMU_REG_DUT_OFFSET + 0x50,				/*!< float dose of irradiation, positive for proton, negative for electron */
	} AMU_REG_DUT_t;
	#undef AMU_REG_DUT_OFFSET

	#define AMU_REG_ADC_DATA_REG_OFFSET		AMU_REG_ADC_DATA
	typedef enum {
		AMU_REG_ADC_DATA_VOLTAGE = AMU_REG_ADC_DATA_REG_OFFSET + 0x00,		/*!< float - converted value of voltage measurement */
		AMU_REG_ADC_DATA_CURRENT = AMU_REG_ADC_DATA_REG_OFFSET + 0x04,		/*!< float - converted value of current measurement */
		AMU_REG_ADC_DATA_TSENSOR = AMU_REG_ADC_DATA_REG_OFFSET + 0x08,		/*!< float - converted value of RTD temperature sensor */
		AMU_REG_ADC_DATA_TSENSORS = AMU_REG_ADC_DATA_REG_OFFSET + 0x08,	/*!< float - converted value of RTD temperature sensor */
		AMU_REG_ADC_DATA_TSENSOR_0 = AMU_REG_ADC_DATA_REG_OFFSET + 0x08,	/*!< float - converted value of RTD temperature sensor */
		AMU_REG_ADC_DATA_TSENSOR_1 = AMU_REG_ADC_DATA_REG_OFFSET + 0x0C,	/*!< float - converted value of RTD temperature sensor */
		AMU_REG_ADC_DATA_TSENSOR_2 = AMU_REG_ADC_DATA_REG_OFFSET + 0x10,	/*!< float - converted value of RTD temperature sensor */
		AMU_REG_ADC_DATA_BIAS = AMU_REG_ADC_DATA_REG_OFFSET + 0x14,		/*!< float - converted value of bias voltage measurement, generated by �Controller DAC */
		AMU_REG_ADC_DATA_OFFSET = AMU_REG_ADC_DATA_REG_OFFSET + 0x18,		/*!< float - converted value of bias voltage measurement, generated by �Controller DAC */
		AMU_REG_ADC_DATA_TEMP = AMU_REG_ADC_DATA_REG_OFFSET + 0x1C,		/*!< float - converted value of internal ADC temperature sensor */
		AMU_REG_ADC_DATA_AVDD = AMU_REG_ADC_DATA_REG_OFFSET + 0x20,		/*!< float - converted value of internal ADC AVDD voltage */
		AMU_REG_ADC_DATA_IOVDD = AMU_REG_ADC_DATA_REG_OFFSET + 0x24,		/*!< float - converted value of internal ADC IOVDD voltage */
		AMU_REG_ADC_DATA_ALDO = AMU_REG_ADC_DATA_REG_OFFSET + 0x28,		/*!< float - converted value of internal ADC ALDO voltage */
		AMU_REG_ADC_DATA_DLDO = AMU_REG_ADC_DATA_REG_OFFSET + 0x2C,		/*!< float - converted value of internal ADC DLDO voltage */
		AMU_REG_ADC_DATA_SS_TL = AMU_REG_ADC_DATA_REG_OFFSET + 0x30,		/*!< float - converted value of AIN0, typically used for quad photo diode sun-sensor measurement */
		AMU_REG_ADC_DATA_SS_BL = AMU_REG_ADC_DATA_REG_OFFSET + 0x34,		/*!< float - converted value of AIN1, typically used for quad photo diode sun-sensor measurement */
		AMU_REG_ADC_DATA_SS_BR = AMU_REG_ADC_DATA_REG_OFFSET + 0x38,		/*!< float - converted value of AIN2, typically used for quad photo diode sun-sensor measurement */
		AMU_REG_ADC_DATA_SS_TR = AMU_REG_ADC_DATA_REG_OFFSET + 0x3C,		/*!< float - converted value of AIN14, typically used for quad photo diode sun-sensor measurement */
	} AMU_REG_ADC_DATA_t;
	#undef AMU_REG_ADC_DATA_REG_OFFSET

	#define AMU_REG_SUNSENSOR_OFFSET	AMU_REG_SUNSENSOR
	typedef enum {
		AMU_REG_SUNSENSOR_TL = AMU_REG_SUNSENSOR_OFFSET + 0x00,	
		AMU_REG_SUNSENSOR_BL = AMU_REG_SUNSENSOR_OFFSET + 0x04,	
		AMU_REG_SUNSENSOR_BR = AMU_REG_SUNSENSOR_OFFSET + 0x08,	
		AMU_REG_SUNSENSOR_TR = AMU_REG_SUNSENSOR_OFFSET + 0x0C,	
		AMU_REG_SUNSENSOR_YAW = AMU_REG_SUNSENSOR_OFFSET + 0x10,	
		AMU_REG_SUNSENSOR_PITCH = AMU_REG_SUNSENSOR_OFFSET + 0x14,	
	} AMU_REG_SUNSENSOR_t;
	#undef AMU_REG_SUNSENSOR_OFFSET

	#define AMU_REG_TIME_OFFSET	AMU_REG_TIME
	typedef enum {
		AMU_REG_TIME_MILLIS = AMU_REG_TIME_OFFSET + 0x00,	
		AMU_REG_TIME_UTC = AMU_REG_TIME_OFFSET + 0x04,		
	} AMU_REG_TIME_t;
	#undef AMU_REG_TIME_OFFSET

	#define AMU_REG_SWEEP_CONFIG_OFFSET	AMU_REG_SWEEP_CONFIG
	typedef enum {
		AMU_REG_SWEEP_CONFIG_TYPE = AMU_REG_SWEEP_CONFIG_OFFSET + 0x00,				/*!< uint8_t - IV_SWEEP_t (i.e. optimized, linear, user_defined etc. ) */
		AMU_REG_SWEEP_CONFIG_NUM_POINTS = AMU_REG_SWEEP_CONFIG_OFFSET + 0x01,			/*!< uint8_t - IV Sweep number of points */
		AMU_REG_SWEEP_CONFIG_DELAY = AMU_REG_SWEEP_CONFIG_OFFSET + 0x02,				/*!< uint8_t - IV sweep delay between changing load points */
		AMU_REG_SWEEP_CONFIG_RATIO = AMU_REG_SWEEP_CONFIG_OFFSET + 0x03,				/*!< uint8_t - IV Sweep number of points */
		AMU_REG_SWEEP_CONFIG_PWR_MODE = AMU_REG_SWEEP_CONFIG_OFFSET + 0x04,			/*!< uint8_t - power mode, type PWR_MODE_t */
		AMU_REG_SWEEP_CONFIG_DAC_GAIN = AMU_REG_SWEEP_CONFIG_OFFSET + 0x05,			/*!< uint8_t - gain setting of DAC during sweep */
		AMU_REG_SWEEP_CONFIG_AVERAGES = AMU_REG_SWEEP_CONFIG_OFFSET + 0x06,			/*!< uint8_t - number of averages to do (full sweep, current steps are assumed constant, voltages are averaged */
		AMU_REG_SWEEP_CONFIG_RES_1 = AMU_REG_SWEEP_CONFIG_OFFSET + 0x07,				/*!< uint8_t - reserved for future use */
		AMU_REG_SWEEP_CONFIG_AM0 = AMU_REG_SWEEP_CONFIG_OFFSET + 0x08,					/*!< float - sun power (default 1366.1 W/m� based on ASTM E-490) */
		AMU_REG_SWEEP_CONFIG_AREA = AMU_REG_SWEEP_CONFIG_OFFSET + 0x0C,				/*!< float - cell area as defined by user (2x2 = 0.0004 m�) */
	} AMU_REG_SWEEP_CONFIG_t;
	#undef AMU_REG_SWEEP_CONFIG_OFFSET

	#define AMU_REG_SWEEP_META_OFFSET	AMU_REG_SWEEP_META
	typedef enum {
		AMU_REG_SWEEP_META_VOC = AMU_REG_SWEEP_META_OFFSET+ 0x00,					/*!< float - converted Isc value of sweep */
		AMU_REG_SWEEP_META_ISC = AMU_REG_SWEEP_META_OFFSET+ 0x04,					/*!< float - converted Voc value of sweep  */
		AMU_REG_SWEEP_META_TSENSOR_START = AMU_REG_SWEEP_META_OFFSET+ 0x08,		/*!< float - converted Tsensor value at start of measurement */
		AMU_REG_SWEEP_META_TSENSOR_END = AMU_REG_SWEEP_META_OFFSET+ 0x0C,			/*!< float - converted Tsensor value at end of measurement */
		AMU_REG_SWEEP_META_FF = AMU_REG_SWEEP_META_OFFSET+ 0x10,					/*!< float - calculated Efficiency based on sweep data */
		AMU_REG_SWEEP_META_EFF = AMU_REG_SWEEP_META_OFFSET+ 0x14,					/*!< float - calculated Fill Factor based on sweep data */
		AMU_REG_SWEEP_META_VMAX = AMU_REG_SWEEP_META_OFFSET+ 0x18,				/*!< float - calculated Imax based on sweep data */
		AMU_REG_SWEEP_META_IMAX = AMU_REG_SWEEP_META_OFFSET+ 0x1C,				/*!< float - calculated Vmax based on sweep data */
		AMU_REG_SWEEP_META_PMAX = AMU_REG_SWEEP_META_OFFSET+ 0x20,				/*!< float - calculated Pmax based on sweep data */
		AMU_REG_SWEEP_META_ADC = AMU_REG_SWEEP_META_OFFSET+ 0x24,					/*!< float - measured at time of sweep, for correcting ADC conversions */
		AMU_REG_SWEEP_META_TIMESTAMP = AMU_REG_SWEEP_META_OFFSET+ 0x28,			/*!< uint32_t - millisecond at start time of sweep, for correcting ADC conversions */
		AMU_REG_SWEEP_META_CRC = AMU_REG_SWEEP_META_OFFSET+ 0x2C,					/*!< uint32_t - calculated 32-bit CRC based on sweep IV data only */
	} AMU_REG_SWEEP_META_t;
	#undef AMU_REG_SWEEP_META_OFFSET
	
	#define AMU_REG_DATA_PTR_OFFSET	AMU_REG_DATA_PTR
	typedef enum {
		AMU_REG_DATA_PTR_COMMAND = 0x00,
		AMU_REG_DATA_PTR_TIMESTAMP = AMU_REG_DATA_PTR_OFFSET + 0x00,		/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_VOLTAGE = AMU_REG_DATA_PTR_OFFSET + 0x01, 			/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_CURRENT = AMU_REG_DATA_PTR_OFFSET + 0x02, 			/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_SS_YAW = AMU_REG_DATA_PTR_OFFSET + 0x03, 			/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_SS_PITCH = AMU_REG_DATA_PTR_OFFSET + 0x04, 		/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_SWEEP_CONFIG = AMU_REG_DATA_PTR_OFFSET + 0x05, 	/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_SWEEP_META = AMU_REG_DATA_PTR_OFFSET + 0x06, 		/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_SUNSENSOR = AMU_REG_DATA_PTR_OFFSET + 0x07, 		/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_PRESSURE = AMU_REG_DATA_PTR_OFFSET + 0x08, 		/*!< Max determined by TWI data definition, partially memory dependent*/
		AMU_REG_DATA_PTR_DATAPOINT = AMU_REG_DATA_PTR_OFFSET + 0x09,		/*!< Max determined by TWI data definition, partially memory dependent*/
	} AMU_REG_DATA_PTR_t;
	#undef AMU_REG_DATA_PTR_OFFSET

	uint16_t amu_regs_get_register_length(uint8_t reg);

	volatile amu_twi_regs_t* amu_regs_get_twi_regs_ptr(void);


#endif /* __AMU_REGS_H__ */